

Scala is a pure object oriented language. Meaning everything
is an object.
You might think that primitive types and functions are not objects.
But primitive types(church numerals and church booleans),
and functions(Function trait  with apply object) are all first class objects in the end.

An anonymous function value like :
(x: Int) => x * x

is expanded to :

{
  class AnonFun extends Function1[Int, Int] {
    def apply(x: Int) = x * x
  }
  new AnonFun
}

or simply :

new Function1[Int, Int] {
  def apply(x: Int) = x * x
}

Methods(defined with def)
e.g. apply are not function values!!!!
i.e. first class function values & cannot exist on their own 

possible references:
scalaschool
http://www.artima.com/pins1ed/index.html#TOC
dailyscala
fpinscala

Scala Expression Summary :

An expression can be :
   An identifier such as x,
   A literal like 0, 1.0, "abc"
   A function application like sqrt(x)
   An operator application like -x, y+x
   A selection like math.abs,
   A conditional expression like if (x < 0) -x else x
   A block like { val x = math.abs(y); x *2 }
   An anonymous function, like x => x +1

A definition can be :
  A function definition like def square(x: Int) = x * x
  A value definition like val y = square(2)

Method infix notation:
Methods of artiy-1 can be invoked as infix form
e.g.
names.mkStr(",")
is same as
names mkStr ","
where names is object, mkStr is a def and its argument is String, mkStr is
infix operator
// should be mostly used for functions with no side effects or methods which
take functions as parameters e.g. forEach

Function types relate to classes, function values relate to objects.
i.e. function type A => B is abbreviation for class scala.Function1[A,B]

An anonymous function value (x: Int) => x*x
is expanded to :
{
  class AnnonFun extends Function1[Int, Int] {
    def apply(x: Int) = x * x
   }
   new AnnonFun
}

or, shorter, using anonymous class syntax:

new Function1[Int, Int] {
  def apply(x: Int) = x * x
}

Expansion of function call/function application
f(a,b) is expanded to
f.apply(a,b)

so OO translation of

val f = (x: Int) = x * x
f(7)

will be :

val f = new Function1[Int, Int]{
  def apply(x:Int) = x * x // Note apply is a method
}
f.apply(7)

Note:
A method such as
def f(x: Int): Boolean = ...
is not itself a function value. but
if you pass it to a place where a functional value
/ function type is expected, eta expansion takes place

Companion objects with apply method (e.g. List)
are useful as sugars
for case clasees, easier syntax for creating
values etc.

Two types of polymorphism :
    subtyping : usually seen more in OO langs
    generics : usually seen more in fp langs/ also avail in oo
    	     where we send type parameters to higher types like List[T] etc.
	     So list here is a type constructor


Type bounds :
     S <: T means S is a subtype of T, or T is a supertype of S
     S >: T means S is a supertype of T, or T is a subtype of S

you can mix type bounds like : [S >: NonEmpty <: IntSet]

Definition of variance:
Say C[T] is a parametrized type and A,B are such that A <: B
In general there are three possible relation ships between C[A] n C[B]
   C[A] <: C[B] - covariant
   C[A] >: C[B] - contravariant
   neither - invariant

Scala lets you declare variance of type by annotating the type
parameter :
class C[+A] { ... }
class C[-A] { ... }
class C[A] { ... }

Scala type tests and type casts :
Scala lets you do these using methods defined in class Any:
      def isInstanceOf[T]: Boolean // for type checking
      def asInstanceOf[T]: T // for type casting
      
Pattern matching with case classes :
trait Expr
case class Number(n: Int) extends Expr
case class Sum(e1: Expr, e2: Expr) extends Expr

How do case classes work?
Basically they are classes with predefined companion objects,
which is why they don't need new.

e.g.
class Number(n: Int) extends Expr { ... }
object Number {
  def apply(n: Int) = new Number(n)
}

So you can write Number(1) instead of new Number(1)

class Sum(e1: Expr, e2: Expr) extends Expr { ... }
object Sum {
  def apply(e1: Expr, e2: Expr) = new Sum(e1, e2)
}
So you can write Sum(Number(1), Number(2)) instead of
new Sum(new Number(1), new Number(2))

Pattern Matching syntax (which itself is an expression):
e match {
  case Pat1 => expr1
  case Pat2 => expr2
  case Pat3 => expr3
}

Patterns are constructed from:
  1. constructors: Number, Sum
  2. variables: n, e1, e2
  3. wildcard patterns _
  4. constants: 1, true.

Same variable can appear only once in a pattern:
so Sum(x, x) is not a legal pattern.

Name of constants should begin with capital letter
with the exception of reserved words null, true false.

If a variable is found in a pattern (lhs)
it matches any value, and binds the variable to this
value

A constant pattern c matches values that are equal to c (== style)

Defining eval in terms of pattern matching :
def eval(e) = e match {
    case Number(n) => n
    case Sum(e1, e2) => eval(e1) + eval(e2)
}

// a case where pattern matching in constructor is non-trivial
// ++ is reducer / combiner which concatenates two lists to generate a list
	   def flatten(l: List[Any]): List[Any] = l match {
	       case Nil => Nil
	       case (h:List[_])::tail => flatten(h) ++ flatten(tail)
	       case h::tail => h::flatten(tail)
	   }                                                


// alternative is depth first recursion with state
  let flatten list =
      let rec aux acc = function
            | [] -> acc
	    | One x :: t -> aux (x :: acc) t
	    | Many l :: t -> aux (aux acc l) t in
      List.rev (aux [] list);;

All Tuplen classes are modeled in following style:
// yes case classes
case class Tuple2[T1, T2](_1: +T1, _2: +T2){
  override def toString = "(" + _1 + "," + _2 + ")"
}

Parametrizing general algorithms with types(mergeSort)
with parametrizing behaviour(comparision function)

Scala's foldLeft function is defined on lists as follows :
def sum(xs: List[Int]) = (xs foldLeft 0) (_ + _)
contrast to haskell's style
sum = foldl (+) zero [xs]

For-Expressions (Think of list comprehensions):
Higher order functions such as map, flatmap, filter or foldLeft
provide powerful constructs for manipulating lists.
But sometimes level of abstraction required by these functions
make program difficult to understand,
In this case, Scala's for expression notation can help :
The for expression is similar to loops in imperative languages,
except that it builds the list of results of all iterations.
(Imperative for constructs work by side effecting things,
For expressions is different this is new results returned
as a result of iterations returning new results like map filter reduce etc.)

Moving from (map, filter, reduce to )
For Expression syntax (squish maps with flatmaps etc into one yield):

A for-expression is of the form
  for ( s ) yield e
where s is a sequence of generators and filters,
and e is an expression whose value is returned by an iteration

=> A generator is of the form p <- e where p is a pattern
and e is an expression whose value is a collection.
( read as p taken from e)
=> A definition is of the form pat = expr
=> A filter is of the form if f where f is a boolean expression
=> The sequence must start with a generator
=> If there are several generators in the sequence, the last generators
  vary faster than the first.

Instead of (s) braces { s } can also be used, and then the
sequence of generators and filters can be written on multiple lines
without repeating semicolons.

e.g. get all 1 < j < i < 10 pairs (i,j)
for {
  i <- 1 until 10 // note right side of <- 
  j <- 1 until i  // should always be collection
} yield (i,j)

res1: scala.collection.immutable.IndexedSeq[(Int, Int)] = Vector((2,1), (3,1), (3,2), (4,1), (4,2), (4,3), (5,1), (5,2), (5,3), (5,4), (6,1), (6,2), (6,3), (6,4), (6,5), (7,1), (7,2), (7,3), (7,4), (7,5), (7,6), (8,1), (8,2), (8,3), (8,4), (8,5), (8,6), (8,7), (9,1), (9,2), (9,3), (9,4), (9,5), (9,6), (9,7), (9,8))

e.g.
for {
  p <- persons            // a generator
  n = p.name              // a definition
  if (n startsWith "To")  // a filter
} yield n

Here is secret : Each line in the expression using the <- symbol
is translated to a flatMap call, exccept for last line which is translated
to a map call
e.g.
for {
  bound <- list
  out <- f(bound)
} yield out

// ... is translated by the Scala compiler as ...
list.flatMap { bound =>
  f(bound).map { out =>
      out
   }
}

Generally translated as :
for(x <- c1; y <- c2; z <- c3) yield {...}
to
c1.flatMap(x => c2.flatMap(y => c3.map(z => {...})))


Sets compared with Seq:
Sets have similar methods from iterable like map, filter

1. seats are unordered, the elements do not have
   a predefined order in which they appear in set
2. Sets do not have duplicate element
3. fundamental operation unique to sets is contains:
   s contains 5

Maps:
Maps are iterables
Maps are functions (of single arity)
Class Map[Key, Value] also extends the function type KeyType => ValueType,
so maps can be used everywhere functions can.
Unlike java, you dont use MapName.get(key),
we directly use it like function e.g. MapName(key)
Also if key does not exist in MapName,
NoSuchElementException is thrown

But it would be more useful if we got an option when key does not exist
e.g.
MapName get ExistingKey = Some(ExistingValue)
MapName get NonExistentKey = None
for which we use following syntax i.e. a get method on map like java
e.g.
mapName get NonExistentKey

List has methods like groupBy which partitions a collection
into a map of collections according to discriminator function g

A polynomial can be seen as a map from exponents to co-efficients
e.g. x^3 - 2x +  5
can be represented as
Map(0 -> 5, 1 -> -2, 3 -> 1)

Dynamic method dispatch:
Object oriented languages(including scala) implement dynamic method Dispatch
Which means the code invoked by a method call depends on
the runtime type of the object that contains the method

A require is a test that is performed when a class is initialized
and if it is not satisfied, throws an illegal argument exception
require(condition, message)

In scala, a class implicitly introduces a constructor,
which is called the primary constructor of that class
The primary constructor simply takes parameter of the class
and executes all statements in the class body

If this is used in function position it means it is a constructor of class
e.g.
class Ration(x: Int, y: Int){// implicit primary constructor
      def this(x: Int) = this(x,1) // extra constructor
      private val g = gcd(x,y)
}

Evaluation model of a class :
Q: How is instantiation of class new C(e1,e2...em) evaluated?
A: Like strict evaluation, e1,e2..em are evaluated first then C(e1..em)
is already a value

Now suppose we have a class definition:

class C(x1, x2, ... xm) = { ... def f(y1, y2 ... yn) = b ... }
How is following evaluated:
new C(v1, v2, ... vm).f(w1, w2, ... wn)
Anser:
it is rewritten (using three substitutions):
[w1/y1 ... wn/yn][v1/x1 ... vm/xm][new C(v1,...,vm)/this] b

w1/y1 can be read as w1 replaces y1

Scala keeps the names of types and (values)symbols in different
namespaces

Nested functions if you dont want to polute outer namespace with
inner functions

recursive functions are tail recursive if the last step done
in the recursive function is calling itself.

Normal recursive functions can be converted to tail recursive
functions if we pass an extra argument accumulator which does
it stuff before function is called.

object are singletons or value objects that are available globally

Companion objects : An object with same name as class or trait and is defined in same source file as associated file or trait.
analog to companion object in java is class with static methods, which are kind of singleton, globally available. In scala you would move static methods to Companion object
Use case for companion objects is to define factory methods for class.(which are static usually in java)
companion objects have full access to class members including private ones
Using companion objects, you can put apply method inside companion object to work like a constructor/factory method

Scala Functions vs Scala Methods:
functions and methods are not the same in Scala

Scala recursive function gotcha :: Recursive functions need to
specify an explicit type. For non recursive function, return
type is optional

Methods are functions that can access state of the class
method is something defined with a def
a value is something you can assign to a val, like first class functions that
would be considered as values

methods are not values, functions are values

Methods (defined with def)have types (X)Y where as same functions as values(defined with val/arrow) have type X => Y

Methods cannot be assigned to variables nor passed as parameters to functions or other methods. If you need to do this, you have to convert the method into a function.

unlike methods, functions are not invoked on an object. Functions are simply called and passed arguments, while methods are invoked on an object and passed arguments

But Scala also provides a shortcut for converting a method into a function. If you invoke the method on its object with no parentheses or parameters and follow it with an underscore, Scala will automatically convert it to a function for you : also known as eta expansion postfix operator

here is some good stuff written abt methods vs functions
https://tpolecat.github.io/2014/06/09/methods-functions.html

An object whose primary purpose is giving its members a namespace is sometimes called a module

In scala, every concrete type is type of some class or trait,
Function types are no exception
e.g.
Int => String is shorthand for
scala.Fnction1[Int, String]
where scala.Function1 is a trait and Int and String are
its type arguments.

apply method gives you a nice syntactic sugar for when class or object
has one main use and can be called directly
Note: You make an object with def apply(), you can call that object directly
      but you make a class with def apply(), you need to new it, and that val can be called directly
(Or in other words)
When we define a function literal, what is actually being defined is an object with a method called apply.
So objects that have an apply method can be called as if they were themselves methods.
So arrow functions are like sugar for single objects with apply method that
has same implementation
The name of these simple object is the trait they implement like
Function1, Function2, Function3, Function4 ... etc
where n shows num of arguments the function takes

e.g. val lessThan = new Function2[Int, Int, Boolean]{
     	 	    	def apply(a: Int, b: Int) = a < b
		    }

There is also useful shorthand for Function1[Int,Int] .. etc in arrow form
e.g.
class AddOne extends (Int => Int) {  // arrow form instead of Function1
 def apply(m:Int): Int = m + 1
}

Another pro of returning functions from functions is currying::
Function currying : any multi argument function can be converted to
functions that take a single value and return single value
functions that consume rest of params until all arguments have arrived or
mathematically :
f(a,b,c)
can also be defined as in lambda arrow notation as
a => b => c => f(a,b,c)

How to uncurry (given a curried fn return multi arity fn):
def uncurry[A,B,C](f: A => B => C): (A, B) => C =
  (a, b) => f(a)(b)

Simple compose definition (f.g) or (f after g):
def compose[A, B, C](f: B=>C, g: A=>B): A => C =
    a => f(g(a))



Constructors :
There is no such thing as constructors:
all code outside of methods i.e. vals and vars are initialized as object is newed up.


Scala case classes:
They are plain and immutable data holding objects that exclusively depend
on their constructor arguments or in other words non-encapsulated
data structures,
that can be destructured using pattern matching
e.g.
Node(1, Leaf(2), None)

for case classes definitely checkout :
http://www.artima.com/pins1ed/case-classes-and-pattern-matching.html


ADTs :
Sum types: encoded by extendin trait
e.g. type Pet = Cat | Fish | Squid
goes to become

sealed trait Pet
case class Cat(name: String) extends Pet
case class Fish(name: String, color: Color) extends Pet
case class Squid(name: String, age: Int) extends Pet

val bob: Pet = Cat("bob")

Destructuring sum types by speicifc type
using pattern matching on sum type with specific type

def sayHi(p: Pet): String =
 p match {
  case Cat(n) => "Meow" + n + "!"
  case Fish(n, _) => "Hello fishy "+ n + "!"
  case Squid(n, _) => "Squid says " + n + "!"
 }


ADTs and encapsulation :
One might object that algebraic data types violate encapsulation
by making public internal representation of type.
In FP, we approach concerns about encapsulation a bit differently,
we don't typically have delicate mutable state which could lead
to bugs or violation of invariants.


Error Handling :
If you think of erro handling with option,Either
it is much like returnting errno in C functions


Non strict functions :
You can write non-strict functions by accepting some of arguments
(just put an arrow(=>) before the type to mark that arg lazy)
unevaluated using following syntax:
def if2[A](cond: Boolean, onTrue: => A, onFalse: => A): A =
    if(cond) onTrue else onFalse

scala> if2(false, sys.error("fail"), 3)
res2: Int = 3

An argument that is passed unevaluated, will be evaluated once for each place
it is referred in body of fn

lazy val is keyword use to delay evaluation of right side on need basis
and the result for that val variable is also cached

Laziness, efficiency and streams:
Chains of transformations on streams are fused into single pass,
through use of laziness, much like java streams before using collectors



Classes and traits :

scala.AnyRef is just an alias for java.lang.Object

Any : the base type of all types, methods are : '==', '!=', 'equals', 'hashcode', 'toString'
AnyRef : same as java.lang.Object
AnyVal : base type of all primitives
Nothing : It is a subtype of every other type, and there is no value of type Nothing
Null : It is subtype of all reference types, There is only one value of type Null which is null, like a singleton e.g. void/empty

The type of expression : throw Exc is Nothing

Classes, objects and traits can inherit from atmost one class,
but arbitrary many traits

Traits resemble interfaces in java,
but are more powerful because they can contain fields,
and concrete methods
On the other hand,
traits cannot have (value) parameters, only classes can

Here is an example of a valid trait :
     trait Planar[T]{
	def height = 3
	def width: Int
	def surface = height * width
	val kk = 2
     }

All member val in a class needs to be defined(mandatory), 
class constructor params val can be left empty(their val is defined by the caller),
also they will be promoted as class members only if val keyword is present
in parameters of class definition
Trait val can be left empty (since it is abstract)

Case classes are like structs with good default impl of
toString, hashcode, structural equality and unapply/matching,
ideal use cases for function data constructors, no data/state is
encapsulated usually, all info is like value object struct

Scala pattern matching :

What exactly is a pattern ?
A pattern is built from constants, constructors, variables and type tests. Pattern matching tests whether a given value (or sequence of values) has the shape defined by a pattern, and, if it does, binds the variables in the pattern to the corresponding components of the value (or sequence of values). The same variable name may not be bound more than once in a pattern

First of all, pattern matching can happen during a simple val
declaration. This is the case when left hand side of val decl
is a pattern instead of a normal identifier
e.g.

val (x,y) = (2,3) // binds x to 2 and y to 3 i.e. equivalent to declaring two new vals x and y with value 2 and 3 respectively

val 1::xs = List(1,2,3); // binds xs to List(2,3) i.e. equivalent to declaring new val xs = List(2,3)


